@model KinderFirst.Models.GalleryItemView

<div class="modal-body">

    @using (Html.BeginForm("ProcessForm", "Pictures", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true)
            <div class="form-group">
                @Html.LabelFor(model => model.FirstName, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.FirstName)
                    @Html.ValidationMessageFor(model => model.FirstName)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.LastName, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LastName)
                    @Html.ValidationMessageFor(model => model.LastName)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Mail, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Mail)
                    @Html.ValidationMessageFor(model => model.Mail)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.File, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.File,new { type = "file",id="kur" })
                    @Html.ValidationMessageFor(model => model.File)
                </div>
            </div>

       </div>
   
        <div class="row">
            <div class="col-md-4 col-md-offset-4">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="submit" id="approve-btn" class="btn btn-danger">Save</button>
            </div>
        </div>
    }
</div>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
    <script>
        var alllowed = ["jpeg", "jpg", "png"]
    document.getElementById("kur").addEventListener('change', function () {
        debugger;
        var kur= document.getElementById("kur");
        var kur=  kur.files[0].type.match("image/*")
        //if (/(image//*)/.test(str)) {
        //    alert('true');
        //}


    });
    function validateFileExtension(fileName) {
        var exp = /^.*\.(jpg|jpeg|gif|JPG|png|PNG)$/;
        return exp.test(fileName);
    }
    function testFile(file) {
        var allowed = !fileIsBlacklisted(file);
        var tooLarge = fileIsTooLarge(file);
        var acceptable = fileIsAcceptable(file);
        $scope.ngModel.$setValidity('blacklist', allowed);
        $scope.ngModel.$setValidity('size', !tooLarge);
        $scope.ngModel.$setValidity('acceptable', acceptable)
        return allowed && acceptable && !tooLarge;
    }

    function fileIsBlacklisted(file) {
        var matches = file.name.match(/\.([^.]+)$/);
        return matches && blacklistedExtensions.exclude($scope.allowType).any(matches[1])
    }
</script>
